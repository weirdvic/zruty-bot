package main

import (
	"database/sql"
	_ "embed"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	_ "github.com/mattn/go-sqlite3"
	"github.com/yanzay/tbot/v2"
)

type user struct {
	userID        int
	firstName     string
	lastName      string
	username      string
	groupID       string
	groupTitle    string
	isBot         bool
	firstSeenAt   sql.NullTime
	checkPassedAt sql.NullTime
}

type zrutyBot struct {
	// –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
	token string
	// –û–±—ä–µ–∫—Ç Client –±–æ—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
	client tbot.Client
	// –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db *sql.DB
}

var (
	zruty      zrutyBot
	logUpdates bool
)

// main –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –≤—ã–ø–æ–ª–Ω—è—è —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
// 1. –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏.
// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –∑–∞–≥—Ä—É–∂–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
// 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
// 4. –°–æ–∑–¥–∞—ë—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç Telegram –±–æ—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
// 5. –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã.
// 6. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–º–µ–Ω—è—è –ø—Ä–∞–≤–∏–ª–∞ –±–∞–Ω–∞.
func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	logUpdates = strings.ToLower(os.Getenv("LOG_UPDATES")) == "true"
	db := openDB("zruty.sqlite3")
	defer db.Close()
	if err := applyMigrations(db); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: %v", err)
	}
	zruty.db = db
	if err := zruty.init(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func(b *zrutyBot) {
		<-c
		b.shutdown()
	}(&zruty)
	bot := tbot.New(zruty.token)
	log.Print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω‚Ä¶")
	zruty.client = *bot.Client()

	bot.Use(updatesHandler)
	bot.HandleMessage(`^/start.*`, startHandler)
	bot.HandleMessage(`^/report.*`, reportHandler)
	bot.HandleMessage(`^/underAttackSwitch.*`, underAttackSwitchHandler)
	bot.HandleMessage(``, defaultHandler)
	bot.HandleCallback(zruty.callbackHandler)

	go func(bot *tbot.Server) {
		err := bot.Start()
		if err != nil {
			log.Fatal(err)
		}
	}(bot)
	log.Print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω‚Ä¶")
	zruty.notifyAdmins("üòé –ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É‚Ä¶")

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
	func(b *zrutyBot) {
		for {
			time.Sleep(1 * time.Minute)
			b.checkUsers()
		}
	}(&zruty)
}
