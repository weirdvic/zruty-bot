package main

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/yanzay/tbot/v2"
)

func startHandler(m *tbot.Message) {
	if m.Chat.Type == "private" && zruty.isAdmin(m.Chat.ID) {
		greetAdminMessage, err := getSetting(zruty.db, "greetAdminMessage")
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å greetAdminMessage: %v", err)
			greetAdminMessage = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!`
		}
		_, err = zruty.client.SendMessage(m.Chat.ID, greetAdminMessage)
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		}
	} else {
		notAdminMessage, err := getSetting(zruty.db, "notAdminMessage")
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å notAdminMessage: %v", err)
			notAdminMessage = `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`
		}
		_, err = zruty.client.SendMessage(m.Chat.ID, notAdminMessage)
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		}
	}
}

func reportHandler(m *tbot.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
	if !zruty.isAdmin(m.Chat.ID) || m.Chat.Type != "private" {
		notAdminMessage, err := getSetting(zruty.db, "notAdminMessage")
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å notAdminMessage: %v", err)
			notAdminMessage = `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`
		}
		_, err = zruty.client.SendMessage(m.Chat.ID, notAdminMessage)
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		}
		return
	}
	rows, err := zruty.db.Query(`
		SELECT
			u.id,
			u.first_name,
			u.last_name,
			u.username,
			u.first_seen_at,
			c.title
		FROM users u
		LEFT JOIN user_chats uc ON u.id = uc.user_id
		LEFT JOIN chats c ON uc.chat_id = c.chat_id
		WHERE u.check_passed_at IS NULL
		ORDER BY u.first_seen_at ASC
	`)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return
	}
	defer rows.Close()

	var (
		reportBuilder strings.Builder
		users         = make(map[int]*user)
		userGroups    = make(map[int][]string)
	)

	for rows.Next() {
		var u user
		err := rows.Scan(&u.userID, &u.firstName, &u.lastName, &u.username, &u.firstSeenAt, &u.groupTitle)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
			continue
		}
		if _, exists := users[u.userID]; !exists {
			users[u.userID] = &u
		}
		userGroups[u.userID] = append(userGroups[u.userID], u.groupTitle)
	}

	if len(users) == 0 {
		reportBuilder.WriteString("`–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`")
	} else {
		reportBuilder.WriteString("```\n–ï—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n")
		i := 1
		for _, u := range users {
			groupTitles := strings.Join(userGroups[u.userID], ", ")
			var timeSinceStr string
			if duration := durationSince(u.firstSeenAt); duration != nil {
				timeSinceStr = duration.String()
			} else {
				timeSinceStr = "unknown"
			}
			reportBuilder.WriteString(fmt.Sprintf(
				"%d.\t%s %s @%s %s –Ω–∞–∑–∞–¥\n–í —á–∞—Ç–∞—Ö: %s\n",
				i,
				u.firstName,
				u.lastName,
				u.username,
				timeSinceStr,
				groupTitles,
			))
			i++
		}
		reportBuilder.WriteString(fmt.Sprintf("\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π %d\n```", len(users)))
	}

	_, err = zruty.client.SendMessage(
		m.Chat.ID,
		reportBuilder.String(),
		tbot.OptParseModeMarkdown,
	)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: %v", err)
	}
}

// defaultHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —á–∞—Ç–µ.
// –û–Ω –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–∞–º–∏.
//
// –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
//
// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º,
// –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –æ—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
// –∏ —É–≤–µ–¥–æ–º–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.
func defaultHandler(m *tbot.Message) {
	if !zruty.isValidGroup(m.Chat.ID) ||
		(m.Chat.Type != "supergroup" && m.Chat.Type != "group") {
		log.Printf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–∏ÃÜ —Ç–∏–ø —á–∞—Ç–∞: %s", m.Chat.Type)
		return
	}
	// –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
	if len(m.NewChatMembers) > 0 {
		log.Printf("üë• –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: %v", m.NewChatMembers)
		zruty.addUsers(m)
		zruty.welcomeUsers(m)
		return
	}
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	uid := m.From.ID
	var (
		username   sql.NullString
		firstName  sql.NullString
		lastName   sql.NullString
		userExists bool
	)

	err := zruty.db.QueryRow(`
		SELECT username, first_name, last_name
		FROM users
		WHERE id = ? AND check_passed_at IS NULL
	`, uid).Scan(&username, &firstName, &lastName)

	switch {
	case err == sql.ErrNoRows:
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –æ–Ω —É–∂–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É
		return
	case err != nil:
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d @%v: %v", uid, username, err)
		return
	default:
		userExists = true
	}

	if userExists {
		// –û–±–Ω–æ–≤–ª—è–µ–º check_passed
		_, err := zruty.db.Exec(`
			UPDATE users SET check_passed_at = CURRENT_TIMESTAMP WHERE id = ?
		`, uid)
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å check_passed –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d @%v: %v", uid, username, err)
			return
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
		zruty.notifyAdmins(fmt.Sprintf(
			"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d @%v –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É",
			uid,
			username,
		))

		log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %v %v(@%v) –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç!",
			firstName,
			lastName,
			username,
		)
	}
}

// underAttackSwitchHandler - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º underAttack. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ
// –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, —Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
func underAttackSwitchHandler(m *tbot.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
	if !zruty.isAdmin(m.Chat.ID) || m.Chat.Type != "private" {
		notAdminMessage, err := getSetting(zruty.db, "notAdminMessage")
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å notAdminMessage: %v", err)
			notAdminMessage = `–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞.`
		}
		_, err = zruty.client.SendMessage(m.Chat.ID, notAdminMessage)
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %v", err)
		}
		return
	}
	err := flipSetting(zruty.db, "underAttack")
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å underAttack: %v", err)
	}
	underAttack, err := getSetting(zruty.db, "underAttack")
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å underAttack: %v", err)
	}
	_, err = zruty.client.SendMessage(m.Chat.ID, fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ underAttack –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: %s", underAttack))
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// callbackHandler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
// –û–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback'–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏,
// –∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∏—Ö —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç.
func (b *zrutyBot) callbackHandler(cq *tbot.CallbackQuery) {
	// –°–ª—É—á–∞–π –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
	if cq.Data != "" && len(cq.Data) > 7 && cq.Data[:7] == "verify_" {
		challengeUserID, err := strconv.Atoi(strings.TrimPrefix(cq.Data, "verify_"))
		if err != nil {
			log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ %s: %v", cq.Data, err)
			_ = b.client.AnswerCallbackQuery(cq.ID, tbot.OptText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"))
			return
		}

		if cq.From.ID != challengeUserID {
			_ = b.client.AnswerCallbackQuery(cq.ID, tbot.OptText("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"))
			return
		}
		b.unrestrictUser(cq.Message.Chat.ID, challengeUserID)
		log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç %s", challengeUserID, cq.Message.Chat.ID)
	}
}
