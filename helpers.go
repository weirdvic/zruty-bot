package main

import (
	"database/sql"
	"embed"
	"log"
	"time"

	"github.com/golang-migrate/migrate/v4"
	"github.com/golang-migrate/migrate/v4/database/sqlite3"
	"github.com/golang-migrate/migrate/v4/source/iofs"
	_ "github.com/mattn/go-sqlite3"
)

//go:embed migrations/*.sql
var migrationFiles embed.FS

// openDB –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –ø–æ –ø—É—Ç–∏ path –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç *sql.DB
// –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç log.Fatal –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
func openDB(path string) *sql.DB {
	db, err := sql.Open("sqlite3", path)
	if err != nil {
		log.Fatal(err)
	}
	// –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := db.Ping(); err != nil {
		log.Fatal(err)
	}
	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	return db
}

// applyMigrations –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –º–∏–≥—Ä–∞—Ü–∏–∏,
// —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –≤ migrationFiles.
func applyMigrations(db *sql.DB) error {
	log.Println("üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö‚Ä¶")
	driver, err := sqlite3.WithInstance(db, &sqlite3.Config{})
	if err != nil {
		return err
	}

	d, err := iofs.New(migrationFiles, "migrations")
	if err != nil {
		return err
	}

	m, err := migrate.NewWithInstance("iofs", d, "sqlite3", driver)
	if err != nil {
		return err
	}

	if err := m.Up(); err != nil && err != migrate.ErrNoChange {
		return err
	}

	log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
	return nil
}

// durationSince –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ t.
// –ï—Å–ª–∏ t.Valid == false, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è nil.
// –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å–µ–∫—É–Ω–¥—ã.
func durationSince(t sql.NullTime) *time.Duration {
	if t.Valid {
		d := time.Since(t.Time).Round(time.Second)
		return &d
	}
	return nil
}

// isSettingEnabled –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º key
// —Ä–∞–≤–Ω–æ "true", –∏–Ω–∞—á–µ false. –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º key –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
// —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è false, nil. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –æ—à–∏–±–∫–∞, —Ç–æ
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è false, error.
func isSettingEnabled(db *sql.DB, key string) (bool, error) {
	var value string
	err := db.QueryRow(`SELECT value FROM settings WHERE key = ?`, key).Scan(&value)
	if err != nil {
		if err == sql.ErrNoRows {
			return false, nil
		}
		return false, err
	}

	return value == "true", nil
}

// flipSetting –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º key
// –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º key –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ
// –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –æ—à–∏–±–∫–∞, —Ç–æ
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è error.
func flipSetting(db *sql.DB, key string) error {
	_, err := db.Exec(`UPDATE settings SET value = CASE WHEN value = 'true' THEN 'false' ELSE 'true' END WHERE key = ?`, key)
	return err
}

// getSetting –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º key.
// –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º key –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, nil.
// –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –æ—à–∏–±–∫–∞, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, error.
func getSetting(db *sql.DB, key string) (string, error) {
	var value string
	err := db.QueryRow(`SELECT value FROM settings WHERE key = ?`, key).Scan(&value)
	return value, err
}
