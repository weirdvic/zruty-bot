package main

import (
	"database/sql"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"time"

	"github.com/yanzay/tbot/v2"
)

// init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞, —á–∏—Ç–∞—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN,
// –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞, –∏–ª–∏ –∏–∑ –ë–î, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞.
// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î, —Ç–æ
// –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –≤ –ë–î.
func (b *zrutyBot) init() error {
	envToken := os.Getenv("BOT_TOKEN")
	if envToken != "" {
		// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∏–º –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ–±–Ω–æ–≤–∏–º –ë–î
		var storedToken string
		err := b.db.QueryRow(`SELECT value FROM settings WHERE key = 'token'`).Scan(&storedToken)
		switch {
		case err == sql.ErrNoRows:
			_, err = b.db.Exec(`INSERT INTO settings (key, value) VALUES ('token', ?)`, envToken)
			if err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ë–î: %w", err)
			}
			log.Println("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
		case err != nil:
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ë–î: %w", err)
		case storedToken != envToken:
			_, err = b.db.Exec(`UPDATE settings SET value = ? WHERE key = 'token'`, envToken)
			if err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ë–î: %w", err)
			}
			log.Println("‚ÑπÔ∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ë–î –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
		default:
			log.Println("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ë–î —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
		}
		b.token = envToken
	} else {
		// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞, —á–∏—Ç–∞–µ–º –∏–∑ –ë–î
		var storedToken string
		err := b.db.QueryRow(`SELECT value FROM settings WHERE key = 'token'`).Scan(&storedToken)
		if err == sql.ErrNoRows || storedToken == "" {
			return fmt.Errorf("–Ω–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –ø—É—Å—Ç–∞ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ settings")
		} else if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ë–î: %w", err)
		}
		b.token = storedToken
		log.Println("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î")
	}

	envAdminID := os.Getenv("BOT_ADMIN_ID")
	if envAdminID != "" {
		var exists bool
		err := b.db.QueryRow(`SELECT EXISTS (SELECT 1 FROM admins WHERE user_id = ?)`, envAdminID).Scan(&exists)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %w", err)
		}

		if !exists {
			// –î–æ–±–∞–≤–∏–º –µ–≥–æ –≤ users –∏ admins
			now := time.Now().UTC()
			_, err = b.db.Exec(`
				INSERT INTO users (id, check_passed_at)
				VALUES (?, ?)
			`, envAdminID, now)
			if err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
			}

			_, err = b.db.Exec(`INSERT INTO admins (user_id) VALUES (?)`, envAdminID)
			if err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %w", err)
			}
			log.Printf("‚úÖ –ê–¥–º–∏–Ω %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É", envAdminID)
		} else {
			log.Printf("‚úÖ –ê–¥–º–∏–Ω %s —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ", envAdminID)
		}
	} else {
		// –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –ë–î –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–∏–Ω –∞–¥–º–∏–Ω
		var count int
		err := b.db.QueryRow(`SELECT COUNT(*) FROM admins`).Scan(&count)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤: %w", err)
		}
		if count == 0 {
			return fmt.Errorf("–Ω–µ –∑–∞–¥–∞–Ω BOT_ADMIN_ID –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ admins –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
		}
		log.Println("‚úÖ –ù–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–¥–º–∏–Ω –≤ –±–∞–∑–µ")
	}

	return nil
}

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∏–Ω–∞—á–µ false.
func (b *zrutyBot) isAdmin(id string) bool {
	var exists bool
	uid, err := strconv.Atoi(id)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %v", err)
		return false
	}
	err = b.db.QueryRow(`SELECT EXISTS(SELECT 1 FROM admins WHERE id = ?)`, uid).Scan(&exists)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %v", err)
		return false
	}
	return exists
}

// isUser –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users, –∏–Ω–∞—á–µ false.
func (b *zrutyBot) isUser(id string) bool {
	var exists bool
	uid, err := strconv.Atoi(id)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ isUser(%s): %v", id, err)
		return false
	}
	err = b.db.QueryRow(`SELECT EXISTS(SELECT 1 FROM users WHERE id = ?)`, uid).Scan(&exists)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ isUser(%s): %v", id, err)
		return false
	}
	return exists
}

// isValidGroup –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–∞—á–µ false.
func (b *zrutyBot) isValidGroup(id string) bool {
	var valid bool
	err := b.db.QueryRow(`SELECT EXISTS(SELECT 1 FROM groups WHERE id = ?)`, id).Scan(&valid)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ isValidGroup(%s): %v", id, err)
		return false
	}
	return valid
}

// isInGroup –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º userID
// —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã groupID.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤–ª–∞–¥–µ–ª—å—Ü–µ–º,
// —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –∏–Ω–∞—á–µ false.
func (b *zrutyBot) isInGroup(groupID string, userID int) bool {
	gcm, err := b.client.GetChatMember(groupID, userID)
	if err != nil {
		log.Print(err)
	}
	switch gcm.Status {
	case "owner":
		return true
	case "administrator":
		return true
	case "member":
		return true
	case "restricted":
		return true
	case "kicked":
		return false
	default:
		return false
	}
}

// addUsers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *zrutyBot) addUsers(m *tbot.Message) {
	users := m.NewChatMembers
	usersAdded := 0

	for _, u := range users {
		uid := strconv.Itoa(u.ID)
		groupID, err := strconv.Atoi(m.Chat.ID)
		if err != nil {
			log.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã:", m.Chat.ID)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if !b.isUser(uid) {
			// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É users
			_, err := b.db.Exec(`
				INSERT INTO users (id, first_name, last_name, username, is_bot, first_seen_at)
				VALUES (?, ?, ?, ?, ?, ?)
			`, u.ID, u.FirstName, u.LastName, u.Username, u.IsBot, time.Now())
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", u.ID, err)
				continue
			}
			log.Printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s (@%s)", u.FirstName, u.LastName, u.Username)
			usersAdded++
		} else {
			log.Printf("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s %s (@%s) —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è", u.FirstName, u.LastName, u.Username)
		}

		// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥—Ä—É–ø–ø–∞
		_, err = b.db.Exec(`
			INSERT OR IGNORE INTO user_groups (user_id, group_id)
			VALUES (?, ?)
		`, uid, groupID)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–≤—è–∑–∏ user->group: %v", err)
		}
	}

	log.Printf("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d / %d", usersAdded, len(users))
}

// welcomeUsers –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *zrutyBot) welcomeUsers(m *tbot.Message) {
	var users = m.NewChatMembers
	for _, u := range users {
		_, err := b.client.SendMessage(
			m.Chat.ID,
			fmt.Sprintf(
				welcomeMessage,
				u.ID,
				u.FirstName,
			),
			tbot.OptParseModeHTML,
		)
		if err != nil {
			log.Print(err)
		}
	}
}

// delUser —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
// 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
// 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
// 3. –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥—Ä—É–ø–ø–∞.
// 4. –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
// –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
func (b *zrutyBot) delUser(id string) {
	log.Print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è‚Ä¶")
	tx, err := b.db.Begin()
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
		return
	}
	if !b.isUser(id) {
		log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", id)
		return
	}
	if b.isAdmin(id) {
		_, err = tx.Exec(`DELETE FROM admins WHERE id = ?`, id)
		if err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %w", err)
		} else {
			log.Println("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %w —É–¥–∞–ª—ë–Ω", id)
		}
	}
	_, err = tx.Exec(`DELETE FROM user_chats WHERE chat_id = ?`, id)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ user->chat: %w", err)
	} else {
		log.Println("‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %w —É–¥–∞–ª–µ–Ω–∞", id)
	}
	_, err = tx.Exec(`DELETE FROM users WHERE id = ?`, id)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	} else {
		log.Println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %w —É–¥–∞–ª—ë–Ω", id)
	}
	err = tx.Commit()
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %w", err)
	}
}

// checkUsers –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∞–Ω–∏—Ç –ª–∏—à–Ω–∏—Ö
func (b *zrutyBot) checkUsers() {
	var banAfter int
	err := b.db.QueryRow(`SELECT CAST(value AS INTEGER) FROM settings WHERE key = 'ban_after'`).Scan(&banAfter)
	if err != nil {
		log.Println("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ë–î: %w", err)
		return
	}
	rows, err := b.db.Query(`
	SELECT
		u.d,
		u.first_name,
		u.last_name,
		u.username,
		uc.chat_id,
		c.title,
		u.is_bot,
		u.first_seen_at,
		u.check_passed_at  
	FROM users u
	LEFT JOIN user_chats uc ON u.id = uc.user_id
	LEFT JOIN chats c ON uc.group_id = c.id
	WHERE u.check_passed_at = NULL
	`)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return
	}
	defer rows.Close()

	var users []user
	for rows.Next() {
		var u user
		err := rows.Scan(&u.userID,
			&u.firstName,
			&u.lastName,
			&u.username,
			&u.groupID,
			&u.groupTitle,
			&u.isBot,
			&u.firstSeenAt,
			&u.checkPassedAt,
		)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v", err)
			continue
		}
		users = append(users, u)
	}

	for _, u := range users {
		uid := strconv.Itoa(u.userID)
		inGroup := b.isInGroup(u.groupID, u.userID)
		if !inGroup {
			log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –±–æ–ª—å—à–µ –Ω–µ –≤ –≥—Ä—É–ø–ø–µ %s", u.username, u.groupTitle)
			b.delUser(uid)
			continue
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ, –Ω–æ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É
		if time.Since(u.firstSeenAt).Hours() > float64(banAfter) {
			log.Printf("–ö–∏–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @%s", u.username)

			err = b.client.KickChatMember(u.groupID, u.userID)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d @%s: %v", u.userID, u.username, err)
				b.notifyAdmins(fmt.Sprintf(
					`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href="tg://user?id=%d">%s</a> –∏–∑ –≥—Ä—É–ø–ø—ã %s : %v`,
					u.userID, u.firstName, u.groupTitle, err,
				))
			} else {
				b.notifyAdmins(fmt.Sprintf(
					`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=%d">%s</a> –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã %s`,
					u.userID, u.firstName, u.groupTitle,
				))

				_, err := b.client.SendMessage(
					u.groupID,
					fmt.Sprintf(
						kickMessage,
						u.firstName,
						deathCauses[rand.Intn(len(deathCauses))],
					),
				)
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: %v", err)
				}
			}
			b.delUser(uid)
			continue
		}
	}
}

// notifyAdmins –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.
// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
// —á–µ—Ä–µ–∑ Telegram API. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤,
// —á—Ç–µ–Ω–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è.
func (b *zrutyBot) notifyAdmins(message string) {
	rows, err := b.db.Query(`SELECT user_id FROM admins`)
	if err != nil {
		log.Printf("‚ùå notifyAdmins: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: %v", err)
		return
	}
	defer rows.Close()

	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			log.Printf("‚ùå notifyAdmins: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è admin user_id %v: %v", id, err)
			continue
		}

		_, err := b.client.SendMessage(
			strconv.Itoa(id),
			fmt.Sprintf("–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s", message),
			tbot.OptParseModeHTML,
		)
		if err != nil {
			log.Printf("‚ùå notifyAdmins: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", id, err)
		}
	}

	if err := rows.Err(); err != nil {
		log.Printf("‚ùå notifyAdmins: –æ—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏: %v", err)
	}
}

func (b *zrutyBot) shutdown() {
	b.notifyAdmins("–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚Ä¶")
	os.Exit(0)
}
